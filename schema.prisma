// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String     @id @default(cuid())
  name                    String     @default("")
  email                   String     @unique @default("")
  password                String
  posts                   Post[]     @relation("Post_author")
  from_Tag_updatedBy      Tag[]      @relation("Tag_updatedBy")
  from_Tag_createdBy      Tag[]      @relation("Tag_createdBy")
  from_Category_updatedBy Category[] @relation("Category_updatedBy")
  from_Category_createdBy Category[] @relation("Category_createdBy")
}

model Post {
  id              String    @id @default(cuid())
  title           String    @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  file_filename   String?
  file_filesize   Int?
  status          String?   @default("draft")
  content         String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate     DateTime?
  author          User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId        String?   @map("author")
  tags            Tag[]     @relation("Post_tags")
  category        Category? @relation("Post_category", fields: [categoryId], references: [id])
  categoryId      String?   @map("category")
  updatedAt       DateTime? @updatedAt
  createdAt       DateTime? @default(now())

  @@index([authorId])
  @@index([categoryId])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @default("")
  posts       Post[]    @relation("Post_tags")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([updatedById])
  @@index([createdById])
}

model Category {
  id          String  @id @default(cuid())
  name        String  @default("")
  posts       Post[]  @relation("Post_category")
  updatedBy   User?   @relation("Category_updatedBy", fields: [updatedById], references: [id])
  updatedById String? @map("updatedBy")
  createdBy   User?   @relation("Category_createdBy", fields: [createdById], references: [id])
  createdById String? @map("createdBy")

  @@index([updatedById])
  @@index([createdById])
}